import re

'''
1、匹配单个数字或字符
. 匹配除换行符以外的任意单一字符
[0-9] 匹配任意一个数字
[a-z] 匹配任意一个小写字母
[A-Z] 匹配任意一个大写字母
[0-9a-zA-Z] 匹配任意一个数字或字母
[0-9a-zA-Z_] 匹配任意一个数字或字母下划线
[^ ] 中括号内开始^ 表示非，不匹配
^ 中括号外的表示开头匹配, 行首匹配
[^0-9] 匹配任意一个非数字字符 
\d  匹配任意一个数字，效果同[0-9]
\D  匹配任意一个非数字字符
\w  匹配任意一个数字字母下划线字符
\W  匹配任意一个非数字字母下划线字符
\s  匹配任意空白字符 如空格 换行 回车 换页 制表符，效果tong [ \f\n\r\t]
\S  匹配任意非空字符

2、匹配边界字符
^   行首匹配, 使用时放在模式首部
$   行尾匹配, 使用时放在模式尾部
\A  整个字符串开始处匹配，而不是每行行首
\Z  整个字符串的尾部匹配，而不是每行行尾
\b  匹配一个单词的边界，即单词间的空格, 使用时要对其进行转义，因为\b本身是一个特殊字符 \\b  或者模式字符串前加r r"\b"
\B  匹配非单词边界，即单词中间匹配， 使用时要对其进行转义，因为\B本身是一个特殊字 \\B


3、匹配多个数字或字符
(xxxx)  将小括号内的字符串作为一个整体来匹配
x?  匹配0个或一个x
x*  匹配0个或多个x
x+  匹配一个或多个x
x{n}    匹配连续的n个x, n是一个正整数
x{n,}   匹配连续的至少n个x
x{n,m}  匹配连续的n到m个x, 连续的至少n个x，至多m个x
x|y 匹配x或y

4、特殊匹配
4.1 解除贪婪匹配，即尽可能的少匹配
*? +? x?   也就是在模式后加? 来解除多匹配
'''

print(re.findall("(aa|2)", "aaab2acaa"))

str1 = "cuixd aaa hah! cuixd bb hahcuixd cc hah"

print(re.findall("cuixd.*?hah", str1))

